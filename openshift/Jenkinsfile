#!groovyâ€‹


//final NEXUS_REPO = 'alm-demo'
def pom = null

node('maven') {
    stage('Build') {
        checkout scm
        pom = readMavenPom file: 'pom.xml'
        sh "mvn -B versions:set -DnewVersion=${pom.version}-${BUILD_NUMBER}"
        sh "mvn -B -Dmaven.test.skip=true clean package"
        stash name: "artifact", includes: "target/*.war"
    }

    stage('Unit Tests') {   
        sh "mvn -B test"
        stash name: "unit_tests", includes: "target/surefire-reports/**, target/jacoco*.exec"
    }

    stage('Integration Tests') {
        sh "mvn -B verify -Dsurefire.skip=true"
        stash name: 'it_tests', includes: 'target/failsafe-reports/**, target/jacoco*.exec'
    }

    stage('Static Analysis') {
        withSonarQubeEnv('sonar'){
            unstash 'it_tests'
            unstash 'unit_tests'
            sh 'mvn sonar:sonar -DskipTests'
        }
    }
/*
    stage('Artifact Upload') {
        unstash 'artifact'

        def pom = readMavenPom file: 'pom.xml'
        def file = "${pom.artifactId}-${pom.version}"
        def jar = "target/${file}.jar"

        sh "cp pom.xml ${file}.pom"
        sh "mvn -B -Popenshift clean deploy -Dmaven.test.skip=true"

*/
    /*
        nexusArtifactUploader artifacts: [
                [artifactId: "${pom.artifactId}", classifier: '', file: "target/${file}.jar", type: 'jar'],
                [artifactId: "${pom.artifactId}", classifier: '', file: "${file}.pom", type: 'pom']
            ], 
            credentialsId: 'nexus', 
            groupId: "${pom.groupId}", 
            nexusUrl: NEXUS_URL, 
            nexusVersion: 'nexus3', 
            protocol: 'http', 
            repository: NEXUS_REPO, 
            version: "${pom.version}"        
            */
  //  }

    stage('Build Image') {
        unstash name:"artifact"
        pom = readMavenPom file: "pom.xml"
        def repoPath =  "${pom.groupId}".replace(".", "/") + 
                        "/${pom.artifactId}"

        def version = pom.version
        sh "cp target/${pom.artifactId}-${version}.war target/${pom.artifactId}.war"
        sh "oc start-build soccer-stats --from-file=target/${pom.artifactId}.war --follow"
    }
}

stage('Approval') {
    timeout(time:3, unit:'DAYS') {
        input 'Do I have your approval for deployment?'
    }
}

stage('Deploy') {
    node {
        openshiftDeploy depCfg: 'soccer-stats', waitTime: '10', waitUnit: 'min'
        openshiftVerifyDeployment depCfg: 'soccer-stats', replicaCount: 1, verifyReplicaCount: true
        slackSend color: 'good', message: "A new version (${pom.version}) of soccer-stats app is ready to use!"
    }
}